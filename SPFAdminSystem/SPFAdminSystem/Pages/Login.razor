@page "/login"
@using SPFAdminSystem.Authentication
@using SPFAdminSystem.Database
@using SPFAdminSystem.Database.UserFiles
@inject IUserData _db
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <EditForm Model="@model" OnValidSubmit="@Authenticate">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" required />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" required/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <input type="submit" name="Submit" value="Button" />
@*            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
*@        </div>
        </EditForm>
    </div>
</div>

@code {
    private async Task KeyHandler(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Authenticate();
        }
    }

    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        User userAccount = new();
        try
        {
            userAccount = await _db.GetUserByName(model.UserName);
            if (userAccount == null || userAccount.Password != model.Password)
            {
                throw new Exception();
            }

            CustomAuthenticationStateProvider customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.UserName,
                    Role = userAccount.Role,
                    GivenName = userAccount.FullName
                });
            navManager.NavigateTo("/", true);
        } catch(Exception)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }
}
