@page "/products"
@attribute [Authorize(Roles = "Admin, Employee")];
@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.ProductFiles
@inject IProductService _productDb

<h5>All Products</h5>
@if (products is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">ProductId</th>
                <th scope="col">Inhouse Title</th>
                <th scope="col">GWS Title</th>
                <th scope="col">Order Price</th>
                <th scope="col">Stock Amount</th>
                <th scope="col">Order Amount</th>
                <th scope="col">AvailableAmount</th>
                <th scope="col">Ordered</th>
                <th scope="col">Barcode</th>
                <th scope="col">Pack Size</th>
                <th scope="col">Target</th>
                <th scope="col">MinOrder</th>
                <th scope="col">Order Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in products.Select((value, index) => (value, index)))
            {
                <tr>
                    <td>
                        <input type="text" value="@item.value.ProductId" disabled>
                    </td>

                    <td>
                        <input type="text" @bind="@item.value.InHouseTitle" @onblur="@(() => ValidateTitle(item.index))">
                    </td>

                    <td>
                        <input type="text" @bind="@item.value.TitleGWS" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.OrderPrice" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.StockAmount" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.OrderAmount" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.AvailableAmount" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.Ordered" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.Barcode" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.Packsize" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.Target" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.MinOrder" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                    <td>
                        <input type="text" @bind="@item.value.OrderQuantity" @onblur="@(() => ValidateTitle(item.index))">
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h3>AddProduct</h3>
    <input @bind=Id type="text" placeholder="Id" required />
    <input @bind=Title type="text" placeholder="Title" required />
    <button onclick="@InsertProduct">add new product</button>
}

@code {
    public string Id { get; private set; }
    public string Title { get; private set; }
    private List<Product> products = new();

    protected override async Task OnInitializedAsync()
    {
        await _productDb.LoadProducts();
        products = _productDb.GetProducts();
    }

    public async void ValidateTitle(int i){
        // Inplemet generic validation

        try{
            if (products[i].InHouseTitle != null && products[i].InHouseTitle.Length != 0)
            {
                await _productDb.CreateOrUpdateProduct(products[i]);
            }
            else
            {
                // Reset
                products[i].InHouseTitle = _productDb.GetProductById(products[i].ProductId, true).Result.InHouseTitle;
            }
        }
        catch (NullReferenceException e)
        {
            //Console.WriteLine("RIGHT HERE BIG BOIIIIII --> " + e.Message);
        }
    }

    public async Task InsertProduct() {

        Product p = new Product();
        p.ProductId = Id;
        p.InHouseTitle = Title;

        await _productDb.CreateOrUpdateProduct(p);

        // Bad pratice
        products.Add(p);
        //Console.WriteLine("Product Added");
    }
}