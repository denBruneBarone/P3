@page "/actions"

@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.UserFiles;
@using SPFAdminSystem.Database.ProductFiles;
@using BlazorTable
@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime js;
@inject IUserService _userDb;
@inject IProductService _prodDb;

<h1>User Actions</h1>
@if (actions == null){
    <h3>Loading...</h3>
}
else{
    <AuthorizeView>
        <Authorized>
            <button onclick="@(()=>AddUserAction(context.User.Identity.Name,"5011921003747"))">Add Dummy Action</button>
        </Authorized>
        <NotAuthorized>

        </NotAuthorized>
    </AuthorizeView>
    <Table TableItem="UserAction" Items="actions" PageSize="15">
        <Column TableItem="UserAction" Title="Date" Field="@(x => x.Date)" Sortable="true" Filterable="true" Width="20%" DefaultSortColumn="true" />
        <Column TableItem="UserAction" Title="User" Field="@(x => x.User.UserName)" Sortable="true" Filterable="true" Width="20%" />
        <Column TableItem="UserAction" Title="Product" Field="@(x => x.Product.InHouseTitle)" Sortable="true" Filterable="true" Width="20%" />
        <Column TableItem="UserAction" Title="Value" Field="@(x => x.Value)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="UserAction" Title="Type" Field="@(x => x.ActionType)" Sortable="true" Filterable="true" Width="10%" Format="C" Align="Align.Right" />
        <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
    </Table>
}

@code
{
    public string Id { get; private set; }
    public string Title { get; private set; }
    private List<UserAction> actions = new();
    bool sortDesc = false;
    string currentlySortedBy = "date";
    public async void AddUserAction(string userName, string prodId)
    {
        try {
            User currUser = await _userDb.GetUserByName(userName);
            Product prod = await _prodDb.GetProductById(prodId);
            UserAction action = new UserAction(currUser.UserId, currUser, DateTime.Now, "OrderQuantity", "7", prodId, prod);
            await _userDb.InsertAction(action);
            actions.Add(action);
            StateHasChanged();
        }
        catch (InvalidOperationException)
        {
            await js.InvokeVoidAsync("alert", $"The current user doesn't exist in database. Maybe you're in developing mode?");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await _userDb.LoadActions();
        actions = _userDb.GetActions();
        foreach (UserAction action in actions)
        {
            action.Product = await _prodDb.GetProductById(action.ProductId);
            action.User = await _userDb.GetUserById(action.UserId);
        }
    }

}