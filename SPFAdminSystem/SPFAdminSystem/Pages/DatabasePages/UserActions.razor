@page "/actions"
@attribute [Authorize(Roles = "Admin, Employee")];
@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.UserFiles;
@using SPFAdminSystem.Database.ProductFiles;
@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime js;
@inject IUserData _db;
@inject IProductData _prodDb;

<h3>User Actions</h3>
@if (actions is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView>
        <Authorized>
            <button onclick="@(()=>AddUserAction(context.User.Identity.Name,"5011921003747"))">Add Dummy Action</button>
        </Authorized>
        <NotAuthorized>

        </NotAuthorized>
    </AuthorizeView>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>User</th>
                <th>Product</th>
                <th>Value</th>
                <th>Type</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var action in actions)
            {
                <tr>
                    <td>@action.Date</td>
                    <td>@action.User.UserName</td>
                    <td>@action.Product.InHouseTitle</td>
                    <td>@action.Value</td>
                    <td>@action.ActionType</td>
                </tr>
            }
        </tbody>
    </table>

}



@code {
    public string Id { get; private set; }
    public string Title { get; private set; }
    private List<UserAction> actions = new();

    public async void AddUserAction(string userName, string prodId)
    {
        User currUser = await _db.GetUserByName(userName);
        Product prod = await _prodDb.GetProductById(prodId);
        UserAction action = new UserAction(currUser.UserId, currUser, DateTime.Now, "OrderQuantity", "7", prodId, prod);
        await _db.InsertAction(action);
        actions.Add(action);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        actions = await _db.GetActions();
        foreach (UserAction action in actions)
        {
            action.Product = await _prodDb.GetProductById(action.ProductId);
            action.User = await _db.GetUserById(action.UserId);
        }
    }



}
