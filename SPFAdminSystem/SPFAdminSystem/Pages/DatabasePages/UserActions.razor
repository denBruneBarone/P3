@page "/actions"
@attribute [Authorize(Roles = "Admin, Employee")];
@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.UserFiles;
@using SPFAdminSystem.Database.ProductFiles;
@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime js;
@inject IUserService _userDb;
@inject IProductService _prodDb;

<h1>User Actions</h1>
@if (actions == null){
    <h3>Loading...</h3>
}
else{
    <AuthorizeView>
        <Authorized>
            <button onclick="@(()=>UserActionHandler(context.User.Identity.Name,"5011921003747"))">Change Product Detail</button>
            @*<button onclick="@(()=>AddUserAction(context.User.Identity.Name,"1"))">Change Product Detail</button>*@
            <button onclick="@(()=>UserActionHandler(context.User.Identity.Name,"Excel File Upload"))">Save Excel File</button>
            <button onclick="@(()=>UserActionHandler(context.User.Identity.Name,"Excel File Upload"))">Upload Excel File</button>
        </Authorized>
        <NotAuthorized>

        </NotAuthorized>
    </AuthorizeView>
    <TableComponent Actions="@actions"></TableComponent>
}

@code
{
    private List<UserAction> actions = new();

    protected override async Task OnInitializedAsync()
    {
        await _userDb.LoadActions();
        actions = _userDb.GetActions();
        foreach (UserAction action in actions)
        {
            action.Product = await _prodDb.GetProductById(action.ProductId);
            action.User = await _userDb.GetUserById(action.UserId);
        }
    }

    // creates the user action in the database, adds it to the model and refreshes
    public async void UserActionHandler(string userName, string identifier){
        try
        {
            UserAction action = new();
            action = await action.CreateUserAction(userName, identifier, _userDb,_prodDb);
            actions.Add(action);
            StateHasChanged();
        }
        catch (InvalidOperationException e)
        {
            if (userName == "Admin")
                await js.InvokeVoidAsync("alert", "You are currently logged in with a developer account, that does not exist in the database. Please change to a real user to add a user action.");
        }
        catch (Microsoft.EntityFrameworkCore.DbUpdateException e)
        {
            await js.InvokeVoidAsync("alert", $"db update error {e}");
        }
        catch (OverflowException)
        {
            await js.InvokeVoidAsync("alert", $"User action yould not be saved with identifier '{identifier}'");
        }
        catch (KeyNotFoundException)
        {
            await js.InvokeVoidAsync("alert", $"An error occurred while saving the user action, the product id '{identifier}' was not recognized.");
        }
    }

}