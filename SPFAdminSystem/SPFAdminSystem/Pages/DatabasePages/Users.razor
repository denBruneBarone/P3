@page "/users"
@attribute [Authorize(Roles = "Admin")];
@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.UserFiles
@using SPFAdminSystem.Shared.PopupModals
@inject IUserService _userDb
@using BCrypt.Net
@inject IJSRuntime js
@inject NavigationManager navManager
<AddUserModal showModal="@showAddModal" closeModal=closeModals/>
<h5>All Users</h5>
@if (users is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="text-align: center;">UserId</th>
                <th style="text-align: center;">UserName</th>
                <th style="text-align: center;">Password</th>
                <th style="text-align: center;">Full Name</th>
                <th style="text-align: center;">Role</th>
                <th style="text-align: center;">Edit</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td style="text-align: center;">@user.UserId</td>
                    <td style="text-align: center;">@user.UserName</td>
                    <td style="text-align: center;">****************</td>
                    <td style="text-align: center;">@user.FullName</td>
                    <td style="text-align: center;">@user.Role</td>
                    <td style="text-align: center;">
                        <a href="/users/@user.UserId">
                            <span class="oi oi-pencil"></span>
                        </a>
@*                        <button style="all: unset; cursor: pointer;" @onclick="() => showDeleteModal(user)">
                            <span class="oi oi-pencil"></span>
                        </button>*@
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div style="width: 25%;">
        <button type="button" class="btn btn-primary" id="adduserbutton" @onclick=showAddPopupModal>Add User</button>
    </div>
}   
<p id="usercount">@usercount</p>
<p id="newusername">@newusername</p>
<p id="newuserfullname">@newuserfullname</p>
<p id="newuserrole">@newuserrole</p>

@code {
    // Variables for input bind
    public string? userName { get; private set; }
    public string? password { get; private set; }
    public string? fullName { get; private set; }
    public string? showAddModal { get; private set; } = "visually-hidden";
    public string? role { get; private set; } = "Employee";
    public User curUser = new User { UserName = "N/A", FullName = "N/A", Role = "N/A", UserId = -3 };
    private List<User> users = new();
    public bool modalDisplay { get; private set; } = false;
    string usercount;
    string newusername;
    string newuserfullname;
    string newuserrole;

    protected override async Task OnInitializedAsync()
    {
        await _userDb.LoadUsers();
        users = _userDb.GetUsers();
        usercount = users.Count.ToString();
        await Task.Delay(1);
        StateHasChanged();
    }

    public async void closeModals()
    {
        showAddModal = "visually-hidden";
        await _userDb.LoadUsers();
        users = _userDb.GetUsers();
        usercount = users.Count.ToString();
        newusername = users[0].UserName;
        newuserrole = users[0].Role;
        newuserfullname = users[0].FullName;
        await Task.Delay(1);
        StateHasChanged();
    }
    public void showAddPopupModal()
    {
        showAddModal = null;
    }
    public async void removeUser(User user)
    {
        users.Remove(user);
        await _userDb.DeleteUser(user);
        StateHasChanged();
    }



    public async Task getUserByName() {
        try 
        {
        } catch(Exception)
        {
            await js.InvokeVoidAsync("alert", "Error: User Not Found");
        }
    }
}

