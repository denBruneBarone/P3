@page "/users"
@attribute [Authorize(Roles = "Admin")];
@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.UserFiles
@inject IUserService _userDb
@using BCrypt.Net
@inject IJSRuntime js

<h5>All Users</h5>
@if (users is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>UserId</th>
                <th>UserName</th>
                <th>Password</th>
                <th>Full Name</th>
                <th>Role</th>


            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.UserName</td>
                    <td>****************</td>
                    <td>@user.FullName</td>
                    <td>@user.Role</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Add User</h3>
    <input @bind=userName @bind:event="oninput" type="text" placeholder="UserName" required />
    <input @bind=password @bind:event="oninput" type="text" placeholder="Password" required />
    <input @bind=fullName @bind:event="oninput" type="text" placeholder="Full Name" required />



    <label for="role">User Role:</label>
    <select name="role" id="role" @bind=role>
        <option value="Employee">employee</option>
        <option value="Admin">admin</option>
    </select>


    <button onclick="@addUser">add new user</button>
    <button onclick="@getUserByName">Test Get User</button>
}   

@code {
    // Variables for input bind
    public string? userName { get; private set; }
    public string? password { get; private set; }
    public string? fullName { get; private set; }
    public string? role { get; private set; } = "Employee";
    private User UserTest { get; set; }

    private List<User> users = new();


    protected override async Task OnInitializedAsync()
    {
        await _userDb.LoadUsers();
        users = _userDb.GetUsers();
    }


    public async Task addUser()
    {

        User u = new User();
        u.UserName = userName;
        u.Password = BCrypt.HashPassword(password);
        u.FullName = fullName;
        u.Role = role;

        await _userDb.InsertUser(u);

        users.Add(u);
        Console.WriteLine("User Added");
    }

    public async Task getUserByName() {
        try 
        {
            UserTest = await _userDb.GetUserByName("fdsafdsa");
        } catch(Exception)
        {
            await js.InvokeVoidAsync("alert", "Error: User Not Found");
        }
    }
}

