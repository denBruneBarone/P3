@using System.Reflection;
@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.ProductFiles;
@using System.Reflection;
@using System.Collections.Generic;
@using System.Runtime.InteropServices;
@using Excel = Microsoft.Office.Interop.Excel;
@inject IProductService _db;

@page "/match"
@*/mapping*@

<div id="topSpacer"></div>

<div class="container">
    <div id="productList">
        @{
            counter = products.Count() - MappedTitles.Count();
        }
        <li id="listTitle">@counter Unknown Products</li>
        <ul id="productListItems">
            @{
                int endLoop = 0;
                counter = 0;
            }
            @foreach (var item in products)
            {
                if (products.Contains(item))
                {
                    if (matchTitle == "" && justBooted == 0 && products.Count() > 0 && endLoop == 0)
                    {
                        <li style="background-color: dodgerblue;"><button @onclick=@(_=>GetValue(item.TitleGWS)) style="background-color: dodgerblue;" id="listButtons">@item.TitleGWS</button></li>
                    }
                    else if (matchTitle == item.TitleGWS)
                    {
                        <li style="background-color: dodgerblue;"><button @onclick=@(_=>GetValue(item.TitleGWS)) style="background-color: dodgerblue;" id="listButtons">@item.TitleGWS</button></li>
                        counter++;
                    }
                    else
                    {
                        if (!IsMapped(item.TitleGWS))
                        {
                            <li style="background-color: #f3cac9;"><button @onclick=@(_=>{GetValue(item.TitleGWS); suggestedMapping();}) style="background-color: #f3cac9;" id="listButtons">@item.TitleGWS</button></li>
                            counter++;
                        }
                        else
                        {
                            <li style="background-color: #b2dab6;"><button @onclick=@(_=>{GetValue(item.TitleGWS); suggestedMapping();}) style="background-color: #b2dab6;" id="listButtons">@item.TitleGWS</button></li>
                        }
                    }
                }
                endLoop = 1;
            }
        </ul>
        <button class="btn btn-primary">Browse all products</button>
    </div>

    @*----------------------------------------------------------------------------------------------------------------------*@

    @{
        <div id="matchProduct">
            @*----------------------------------------------------------------------------------------------------------------------*@
            <div id="leftItem">
                <div id="itemTitle">
                    @{
                        if (matchTitle == "" && products.Count > 0)
                        {
                            matchTitle = products[0].TitleGWS;
                            UpdateMatch(matchTitle);
                        }
                    }
                    <h1 style="font-weight: 700; font-size: 24px;">@matchTitle</h1> @*dynamisk item title*@
                </div>
                <div id="currentInfoTitle">
                    <h3 style="text-align: center;">Current match information:</h3>
                </div>
                <div id="leftMatchItemsFlex">
                    <div id="currentInfo">
                        <ul id="matchListLeft">
                            @{
                                if (products.Count() > 0)
                                {
                                    if (matchTitle != "")
                                    {
                                        foreach (PropertyInfo prop in products[chosenProduct].GetType().GetProperties())
                                        {
                                            if (prop.Name.ToLower() == "target" && TargetCpy != -1 && TargetCpy != products[chosenProduct].Target ||
                                            prop.Name.ToLower() == "inhousetitle" && InHouseTitleCpy != "" && InHouseTitleCpy != products[chosenProduct].InHouseTitle ||
                                            prop.Name.ToLower() == "productid" && ProductIdCpy != "" && ProductIdCpy != products[chosenProduct].ProductId ||
                                            prop.Name.ToLower() == "orderprice" && OrderPriceCpy != -1 && OrderPriceCpy != products[chosenProduct].OrderPrice ||
                                            prop.Name.ToLower() == "stockamount" && StockAmountCpy != -1 && StockAmountCpy != products[chosenProduct].StockAmount ||
                                            prop.Name.ToLower() == "orderamount" && OrderAmountCpy != -1 && OrderAmountCpy != products[chosenProduct].OrderAmount ||
                                            prop.Name.ToLower() == "availableamount" && AvailableAmountCpy != -1 && AvailableAmountCpy != products[chosenProduct].AvailableAmount ||
                                            prop.Name.ToLower() == "ordered" && OrderedCpy != -1 && OrderedCpy != products[chosenProduct].Ordered ||
                                            prop.Name.ToLower() == "orderquantity" && OrderQuantityCpy != -1 && OrderQuantityCpy != products[chosenProduct].OrderQuantity ||
                                            prop.Name.ToLower() == "titlegws" && TitleGWSCpy != "" && TitleGWSCpy != products[chosenProduct].TitleGWS ||
                                            prop.Name.ToLower() == "barcode" && BarcodeCpy != "" && BarcodeCpy != products[chosenProduct].Barcode ||
                                            prop.Name.ToLower() == "packsize" && PacksizeCpy != -1 && PacksizeCpy != products[chosenProduct].Packsize ||
                                            prop.Name.ToLower() == "minorder" && MinOrderCpy != -1 && MinOrderCpy != products[chosenProduct].MinOrder ||
                                            prop.Name.ToLower() == "ischecked" && IsCheckedCpy != products[chosenProduct].IsChecked
                                            )
                                            {
                                                <li style="color: green; font-weight: 700;" id="itemLiTitles">@prop.Name ✓</li>
                                            }
                                            else
                                            {
                                                <li id="itemLiTitles">@prop.Name</li>
                                            }
                                        }
                                    }
                                }
                            }
                        </ul>
                    </div>
                    <div id="currentInfoValues">
                        <ul style="list-style: none;" id="matchListLeft">
                            @{
                                if (products.Count() > 0)
                                {
                                    if (matchTitle != "")
                                    {
                                        foreach (PropertyInfo prop in products[chosenProduct].GetType().GetProperties())
                                        {
                                            if (prop.Name == "ArriveDate" && ArriveDateCpy != null)
                                            {
                                                <li id="itemLi">@ArriveDateCpy.ToString().Substring(0,10)</li>
                                            }
                                            else if (prop.Name == "RemovedFromStockDate" && RemovedFromStockDateCpy != null)
                                            {
                                                <li id="itemLi">@RemovedFromStockDateCpy.ToString().Substring(0,10)</li>
                                            }
                                            else if (prop.Name.ToLower() == "inhousetitle" && InHouseTitleCpy != null)
                                            {
                                                <li id="itemLi">@InHouseTitleCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "productid" && ProductIdCpy != null)
                                            {
                                                <li id="itemLi">@ProductIdCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "orderprice" && OrderPriceCpy != null)
                                            {
                                                <li id="itemLi">@OrderPriceCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "stockamount" && StockAmountCpy != null)
                                            {
                                                <li id="itemLi">@StockAmountCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "orderamount" && OrderAmountCpy != null)
                                            {
                                                <li id="itemLi">@OrderAmountCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "availableamount" && AvailableAmountCpy != null)
                                            {
                                                <li id="itemLi">@AvailableAmountCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "ordered" && OrderedCpy != null)
                                            {
                                                <li id="itemLi">@OrderedCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "orderquantity" && OrderQuantityCpy != null)
                                            {
                                                <li id="itemLi">@OrderQuantityCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "titlegws" && TitleGWSCpy != null)
                                            {
                                                <li id="itemLi">@TitleGWSCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "barcode" && BarcodeCpy != null)
                                            {
                                                <li id="itemLi">@BarcodeCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "packsize" && PacksizeCpy != null)
                                            {
                                                <li id="itemLi">@PacksizeCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "minorder" && MinOrderCpy != null)
                                            {
                                                <li id="itemLi">@MinOrderCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "target" && TargetCpy != null)
                                            {
                                                <li id="itemLi">@TargetCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "ischecked" && IsCheckedCpy != null)
                                            {
                                                <li id="itemLi">@IsCheckedCpy.ToString()</li>
                                            }
                                            else
                                            {
                                                <li id="itemLi"></li>
                                            }
                                        }
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div id="ignoreApplyButtons">
                    <button onclick=@(()=>ApplyChanges(true)) class="btn btn-warning">Reset</button>
                </div>
            </div>

            @*----------------------------------------------------------------------------------------------------------------------*@

            <div id="rightItem">
                @code {
                    int justBooted = 0;

                    private void updateJustBooted()
                    {
                        justBooted = 1;
                    }
                }
                <div id="itemTitle">
                    <div id="rightAuxItems">
                        <div id="dropdownId">
                            <select name="matches" id="matches" @onchange="checkIfMatchChosen">
                                @foreach (Product item in matchSuggestions)
                                {
                                    <option value="@item.TitleGWS">@item.TitleGWS</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div id="currentInfoTitle">
                    <h3 style="text-align: center;">Selected match information:</h3>
                </div>
                <div id="leftMatchItemsFlex" class="w-100">
                    <div id="currentInfo" class="w-100">
                        <ul id="matchListLeft" class="w-100">
                            @{
                                foreach (PropertyInfo prop in matchSuggestions[chosenMatch].GetType().GetProperties())
                                {
                                    <div class="w-100">
                                    <li style="display: flex; justify-content: space-between;">
                                        <div>
                                                @if (!checkboxclearer)
                                                {
                                                <input class="form-check-input" type="checkbox" id="@prop.Name-checkbox" @onchange="eventArgs => { CheckboxClicked(prop, eventArgs.Value); }">
                                                }
                                            <label class="form-check-label" for="@prop.Name-checkbox">
                                                    @prop.Name
                                            </label>
                                        </div>
                                        <div>
                                                @if (prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                                                {
                                                    @if (prop.Name == "ArriveDate" || prop.Name == "RemovedFromStock" || prop.Name == "UserActions")
                                                    {
                                                        @prop.GetValue(matchSuggestions[chosenMatch], null).ToString().Substring(0,10)
                                                    }
                                                    else
                                                    {
                                                        @prop.GetValue(matchSuggestions[chosenMatch], null).ToString()
                                                    }
                                                }
                                        </div>
                                    </li>
                            </div>
                                }
                            }
                    </ul>
                </div>
            </div>
            <div id="ignoreApplyButtons">
                <button onclick=@(()=>ApplyChanges(false)) class="btn btn-success">Apply</button>
            </div>
        </div>
    </div>
    }
</div>

@*----------------------------------------------------------------------------------------------------------------------*@

@*----------------------------------------------------------------------------------------------------------------------*@
@*
    Accept button for after applying changes
*@
<div class="w-100" style="display: flex; justify-content: center; align-items: center;">
    <div class="w-25" style="display: flex; justify-content: space-between;">
        <button onclick=@(()=>AddProperties(products[chosenProduct])) class="btn btn-danger btn-lg">Accept</button>
    </div>
</div>

@*----------------------------------------------------------------------------------------------------------------------*@

@code {
    int? StockAmountCpy = -1;
    int? OrderAmountCpy = -1;
    int? AvailableAmountCpy = -1;
    int? OrderedCpy = -1;
    int? OrderQuantityCpy = -1;
    int? PacksizeCpy = -1;
    int? MinOrderCpy = -1;
    int? TargetCpy = -1;
    bool? IsCheckedCpy;
    double? OrderPriceCpy = -1;
    string TitleGWSCpy = "";
    string InHouseTitleCpy = "";
    string ProductIdCpy = "";
    string BarcodeCpy = "";
    DateTime? ArriveDateCpy;
    DateTime? RemovedFromStockDateCpy;

    bool checkboxclearer = false;
    int counter = 0;
    string matchTitle = "";
    bool matchprodCheckStatus = false;
    private async void GetValue(string item)
    {
        matchTitle = item;

        ApplyChanges(false);
        UpdateMatch(matchTitle);
        checkboxclearer = true;
        await Task.Delay(1);
        StateHasChanged();
        checkboxclearer = false;
        await Task.Delay(1);
        StateHasChanged();
    }

    int chosenProduct = 0;
    int chosenMatch = 0;

    private void UpdateMatch(string currentProduct)
    {
        for (int i = 0; i < products.Count(); i++)
        {
            foreach (PropertyInfo prop in products[i].GetType().GetProperties())
            {
                if (prop.GetValue(products[i], null) != null)
                {
                    if (products[i].TitleGWS == matchTitle)
                    {
                        chosenProduct = i;

                        //Copy of all product variables - buffer before accepting match changes
                        StockAmountCpy = products[chosenProduct].StockAmount;
                        OrderPriceCpy = products[chosenProduct].OrderPrice;
                        OrderAmountCpy = products[chosenProduct].OrderAmount;
                        AvailableAmountCpy = products[chosenProduct].AvailableAmount;
                        OrderedCpy = products[chosenProduct].Ordered;
                        OrderQuantityCpy = products[chosenProduct].OrderQuantity;
                        PacksizeCpy = products[chosenProduct].Packsize;
                        MinOrderCpy = products[chosenProduct].MinOrder;
                        TargetCpy = products[chosenProduct].Target;
                        IsCheckedCpy = products[chosenProduct].IsChecked;
                        TitleGWSCpy = products[chosenProduct].TitleGWS;
                        InHouseTitleCpy = products[chosenProduct].InHouseTitle;
                        ProductIdCpy = products[chosenProduct].ProductId;
                        BarcodeCpy = products[chosenProduct].Barcode;
                        ArriveDateCpy = products[chosenProduct].ArriveDate;
                        RemovedFromStockDateCpy = products[chosenProduct].RemovedFromStockDate;
                    }
                }
            }
        }
        matchprodCheckStatus = false;
    }

    private void UpdateMatchTitle(string updatedTitle)
    {
        matchTitle = updatedTitle;
    }

    List<Product> tempProperties = new();
    private void AddProperties(Product product)
    {
        if (InHouseTitleCpy != null && InHouseTitleCpy != products[chosenProduct].InHouseTitle && InHouseTitleCpy != "")
        {
            products[chosenProduct].InHouseTitle = InHouseTitleCpy;
        }
        if (TitleGWSCpy != null && TitleGWSCpy != products[chosenProduct].TitleGWS && TitleGWSCpy != "")
        {
            products[chosenProduct].TitleGWS = TitleGWSCpy;
        }
        if (TargetCpy != null && TargetCpy != products[chosenProduct].Target && TargetCpy != -1)
        {
            products[chosenProduct].Target = TargetCpy;
        }
        if (OrderAmountCpy != null && OrderAmountCpy != products[chosenProduct].OrderAmount && OrderAmountCpy != -1)
        {
            products[chosenProduct].OrderAmount = OrderAmountCpy;
        }
        if (AvailableAmountCpy != null && AvailableAmountCpy != products[chosenProduct].AvailableAmount && AvailableAmountCpy != -1)
        {
            products[chosenProduct].AvailableAmount = AvailableAmountCpy;
        }
        if (OrderPriceCpy != null && OrderPriceCpy != products[chosenProduct].OrderPrice && OrderPriceCpy != -1)
        {
            products[chosenProduct].OrderPrice = OrderPriceCpy;
        }
        if (OrderedCpy != null && OrderedCpy != products[chosenProduct].Ordered && OrderedCpy != -1)
        {
            products[chosenProduct].Ordered = OrderedCpy;
        }
        if (StockAmountCpy != null && StockAmountCpy != products[chosenProduct].StockAmount && StockAmountCpy != -1)
        {
            products[chosenProduct].StockAmount = StockAmountCpy;
        }
        if (PacksizeCpy != null && PacksizeCpy != products[chosenProduct].Packsize && PacksizeCpy != -1)
        {
            products[chosenProduct].Packsize = PacksizeCpy;
        }
        if (MinOrderCpy != null && MinOrderCpy != products[chosenProduct].MinOrder && MinOrderCpy != -1)
        {
            products[chosenProduct].MinOrder = MinOrderCpy;
        }
        if (IsCheckedCpy != null && IsCheckedCpy != products[chosenProduct].IsChecked)
        {
            products[chosenProduct].IsChecked = IsCheckedCpy;
        }
        if (OrderQuantityCpy != null && OrderQuantityCpy != products[chosenProduct].OrderQuantity && OrderQuantityCpy != -1)
        {
            products[chosenProduct].OrderQuantity = OrderQuantityCpy;
        }
        if (ProductIdCpy != null && ProductIdCpy != products[chosenProduct].ProductId && ProductIdCpy != "")
        {
            products[chosenProduct].ProductId = ProductIdCpy;
        }
        if (BarcodeCpy != null && BarcodeCpy != products[chosenProduct].Barcode && BarcodeCpy != "")
        {
            products[chosenProduct].Barcode = BarcodeCpy;
        }

        matchTitle = TitleGWSCpy;
        if (chosenProduct + 1 < products.Count())
        {
            Console.WriteLine(products.Count() + " AND " + chosenProduct);
            matchTitle = products[chosenProduct + 1].TitleGWS;
        }
        else
        {
            matchTitle = products[0].TitleGWS;
        }
        GetValue(matchTitle);
    }

    List<PropertyInfo> checkedProperties = new();
    List<bool> checkboxValues = new();
    private void CheckboxClicked(PropertyInfo prop, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!checkedProperties.Contains(prop))
            {
                checkedProperties.Add(prop);
            }
        }
        else
        {
            if (checkedProperties.Contains(prop))
            {
                checkedProperties.Remove(prop);
            }
        }
    }

    private void getChosenMatchIndex(string dropDownList)
    {
        for (int t = 0; t < matchSuggestions.Count(); t++)
        {
            if (dropDownList == matchSuggestions[t].TitleGWS)
            {
                chosenMatch = t;
                break;
            }
        }
    }

    string dropDownList = "";

    private void checkIfMatchChosen(ChangeEventArgs e)
    {
        dropDownList = e.Value.ToString();

        if (dropDownList != "" && dropDownList != null && dropDownList != "Select a match")
        {
            getChosenMatchIndex(dropDownList);
        }
        updateJustBooted();
    }

    private void ApplyChanges(bool reset)
    {
        bool titlegwsTicked = false;
        bool inhousetitleTicked = false;
        bool productidTicked = false;
        bool barcodeTicked = false;
        bool targetTicked = false;
        bool orderpriceTicked = false;
        bool stockamountTicked = false;
        bool availableamountTicked = false;
        bool orderedTicked = false;
        bool orderquantityTicked = false;
        bool packsizeTicked = false;
        bool minorderTicked = false;

        if (reset != true)
        {
            foreach (PropertyInfo prop in checkedProperties)
            {
                if (prop.Name.ToLower() == "titlegws" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    TitleGWSCpy = prop.GetValue(matchSuggestions[chosenMatch], null).ToString();
                    titlegwsTicked = true;
                }
                else if (prop.Name.ToLower() == "inhousetitle" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    InHouseTitleCpy = prop.GetValue(matchSuggestions[chosenMatch], null).ToString();
                    inhousetitleTicked = true;
                }
                else if (prop.Name.ToLower() == "productid" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    ProductIdCpy = prop.GetValue(matchSuggestions[chosenMatch], null).ToString();
                    productidTicked = true;
                }
                else if (prop.Name.ToLower() == "barcode" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    BarcodeCpy = prop.GetValue(matchSuggestions[chosenMatch], null).ToString();
                    barcodeTicked = true;
                }
                else if (prop.Name.ToLower() == "target" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    TargetCpy = temp;
                    targetTicked = true;
                }
                else if (prop.Name.ToLower() == "orderprice" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    OrderPriceCpy = temp;
                    orderpriceTicked = true;
                }
                else if (prop.Name.ToLower() == "stockamount" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    StockAmountCpy = temp;
                    stockamountTicked = true;
                }
                else if (prop.Name.ToLower() == "availableamount" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    AvailableAmountCpy = temp;
                    availableamountTicked = true;
                }
                else if (prop.Name.ToLower() == "ordered" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    OrderedCpy = temp;
                    orderedTicked = true;
                }
                else if (prop.Name.ToLower() == "orderquantity" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    OrderQuantityCpy = temp;
                    orderquantityTicked = true;
                }
                else if (prop.Name.ToLower() == "packsize" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    PacksizeCpy = temp;
                    packsizeTicked = true;
                }
                else if (prop.Name.ToLower() == "minorder" && prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(matchSuggestions[chosenMatch], null).ToString());
                    MinOrderCpy = temp;
                    minorderTicked = true;
                }
            }
        }
        else if(reset == true)
        {
            GetValue(matchTitle);
        }
        if (titlegwsTicked == false) { TitleGWSCpy = products[chosenProduct].TitleGWS; }
        if (inhousetitleTicked == false) { InHouseTitleCpy = products[chosenProduct].InHouseTitle; }
        if (productidTicked == false) { ProductIdCpy = products[chosenProduct].ProductId; }
        if (barcodeTicked == false) { BarcodeCpy = products[chosenProduct].Barcode; }
        if (targetTicked == false) { TargetCpy = products[chosenProduct].Target; }
        if (orderpriceTicked == false) { OrderPriceCpy = products[chosenProduct].OrderPrice; }
        if (stockamountTicked == false) { StockAmountCpy = products[chosenProduct].StockAmount; }
        if (availableamountTicked == false) { AvailableAmountCpy = products[chosenProduct].AvailableAmount; }
        if (orderedTicked == false) { OrderedCpy = products[chosenProduct].Ordered; }
        if (orderquantityTicked == false) { OrderQuantityCpy = products[chosenProduct].OrderQuantity; }
        if (packsizeTicked == false) { PacksizeCpy = products[chosenProduct].Packsize; }
        if (minorderTicked == false) { MinOrderCpy = products[chosenProduct].MinOrder; }
    }

    /*List of strings, is used to check if product is mapped*/
    private List<string> MappedTitles = new List<string>();

    /*Check if title is in MappedTitles list*/
    private bool IsMapped(string title)
    {
        if (MappedTitles.Count() > 0)
        {
            foreach (string prodTitle in MappedTitles)
            {
                if (title == prodTitle)
                {
                    return true;
                }
            }
            return false;
        }
        else
        {
            return false;
        }
    }

    private Mapping productToMapping(Product product)
    {
        Mapping mapping = new Mapping();
        foreach (PropertyInfo prop in product.GetType().GetProperties())
        {
            if (prop.Name == "ProductId")
            {
                mapping.ProductIdMapping = prop.GetValue(product, null).ToString();
            }
            else if (prop.Name == "Barcode")
            {
                mapping.Barcode = prop.GetValue(product, null).ToString();
            }
            else if (prop.Name == "TitleGWS")
            {
                mapping.TitleGWS = prop.GetValue(product, null).ToString();
            }
            else if (prop.Name == "MinOrder")
            {
                mapping.MinOrder = Convert.ToInt32(prop.GetValue(product, null));
            }
            else if (prop.Name == "Packsize")
            {
                mapping.PackSize = Convert.ToInt32(prop.GetValue(product, null));
            }
            else if (prop.Name == "Target")
            {
                mapping.Target = Convert.ToInt32(prop.GetValue(product, null));
            }
        }
        return mapping;
    }

    /*Get products from database and insert products into database*/
    private List<Product> products = new();

    private List<Product> UnknownProducts = new();
    private List<Product> matchSuggestions = new();

    private List<Product> productsTemp = new();

    private async void suggestedMapping()
    {
        matchSuggestions.Clear();
        matchSuggestions = await _db.GetMatchSuggestions(products[chosenProduct]);
    }

    protected override async Task OnInitializedAsync()
    {
        //await _db.LoadProducts();
        products = await _db.GetUnknownProducts("Pricelist Europe__3.xlsx");
        matchSuggestions = await _db.GetMatchSuggestions(products[chosenProduct]);
    }

    private int? StringToInt(string str)
    {
        int? parsedInt = -1;
        Int32.TryParse(str, out int x);    // or, use `int.TryParse()`

        if (x > 0)
        {
            parsedInt = int.Parse(str);
            return parsedInt;
        }
        else
        {
            return parsedInt;
        }
    }
}
@*
#b2dab6 - grøn
#e6bdbc - m.rød
#f3cac9 - l.rød
#0288d1 - blå
*@