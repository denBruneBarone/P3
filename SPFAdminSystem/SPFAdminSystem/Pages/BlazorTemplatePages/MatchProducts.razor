@using System.Reflection;
@using SPFAdminSystem.Database;
@using System.Collections.Generic;
@using System.Runtime.InteropServices;
@using SPFAdminSystem.Database.ProductFiles;
@attribute [Authorize(Roles = "Admin, Employee")];
@inject IProductService _db
@inject NavigationManager navManager

@page "/match"

<div id="topSpacer"></div>

<div class="container">
    <div id="productList">
        @{
            counter = products.Count() - MappedTitles.Count() - IgnoredTitles.Count();
            if(counter<=0){
                counter = 0;
                disableContinue = false;
            }
        }
        <li id="listTitle">@counter Unknown Products</li>
        <ul id="productListItems">
            @{
                int endLoop = 0;
                counter = 0;
            }
            @foreach (var item in products)
            {
                if (products.Contains(item))
                {
                    if (matchTitle == "" && justBooted == 0 && products.Count() > 0 && endLoop == 0)
                    {
                        <li style="background-color: dodgerblue;"><button @onclick=@(_=>GetValue(item.Barcode)) style="background-color: dodgerblue;" id="listButtons">@item.TitleGWS</button></li>
                    }
                    else if (matchTitle == item.Barcode)
                    {
                        <li style="background-color: dodgerblue;"><button @onclick=@(_=>GetValue(item.Barcode)) style="background-color: dodgerblue;" id="listButtons">@item.TitleGWS</button></li>
                        counter++;
                    }
                    else
                    {
                        if (IsMapped(item.Barcode))
                        {
                            <li style="background-color: #b2dab6;"><button @onclick=@(_=>{GetValue(item.Barcode); suggestedMapping();}) style="background-color: #b2dab6;" id="listButtons">@item.TitleGWS</button></li>
                        }
                        else if (IsIgnored(item.Barcode))
                        {
                            <li style="background-color: yellow;"><button @onclick=@(_=>{GetValue(item.Barcode); suggestedMapping();}) style="background-color: yellow;" id="listButtons">@item.TitleGWS</button></li>
                        }
                        else
                        {
                            <li style="background-color: #f3cac9;"><button @onclick=@(_=>{GetValue(item.Barcode); suggestedMapping();}) style="background-color: #f3cac9;" id="listButtons">@item.TitleGWS</button></li>
                            counter++;
                        }
                    }
                }
                endLoop = 1;
            }
        </ul>
    </div>

    @*----------------------------------------------------------------------------------------------------------------------*@

    @{
        <div id="matchProduct">
            <div id="leftItem">
                <div id="itemTitle">
                    <h3 style="text-align: center;">Unknown product:</h3>
                </div>
                <div id="currentInfoTitle">
                    @{
                        if (matchTitle == "" && products.Count > 0)
                        {
                            matchTitle = products[0].Barcode;
                            UpdateMatch(matchTitle);
                        }
                    }
                    <h1 style="font-weight: 700; font-size: 24px;">@products[chosenProduct].TitleGWS</h1>
                </div>
                <div id="leftMatchItemsFlex">
                    <div id="currentInfo">
                        <ul id="matchListLeft">
                            @{
                                if (products.Count() > 0)
                                {
                                    if (matchTitle != "")
                                    {
                                        foreach (PropertyInfo prop in products[chosenProduct].GetType().GetProperties())
                                        {
                                            if (sameTitle == true && prop.Name.ToLower() == "titlegws")
                                            {
                                                <li style="color: red; font-weight: 700;" id="itemLiTitles">@prop.Name</li>
                                                sameTitle = false;
                                            }
                                            else if (prop.Name.ToLower() == "target" && TargetCpy != -1 && TargetCpy != products[chosenProduct].Target ||
                                            prop.Name.ToLower() == "inhousetitle" && InHouseTitleCpy != "" && InHouseTitleCpy != products[chosenProduct].InHouseTitle ||
                                            prop.Name.ToLower() == "productid" && ProductIdCpy != "" && ProductIdCpy != products[chosenProduct].ProductId ||
                                            prop.Name.ToLower() == "orderprice" && OrderPriceCpy != -1 && OrderPriceCpy != products[chosenProduct].OrderPrice ||
                                            prop.Name.ToLower() == "stockamount" && StockAmountCpy != -1 && StockAmountCpy != products[chosenProduct].StockAmount ||
                                            prop.Name.ToLower() == "orderamount" && OrderAmountCpy != -1 && OrderAmountCpy != products[chosenProduct].OrderAmount ||
                                            prop.Name.ToLower() == "availableamount" && AvailableAmountCpy != -1 && AvailableAmountCpy != products[chosenProduct].AvailableAmount ||
                                            prop.Name.ToLower() == "ordered" && OrderedCpy != -1 && OrderedCpy != products[chosenProduct].Ordered ||
                                            prop.Name.ToLower() == "orderquantity" && OrderQuantityCpy != -1 && OrderQuantityCpy != products[chosenProduct].OrderQuantity ||
                                            prop.Name.ToLower() == "titlegws" && TitleGWSCpy != "" && TitleGWSCpy != products[chosenProduct].TitleGWS ||
                                            prop.Name.ToLower() == "barcode" && BarcodeCpy != "" && BarcodeCpy != products[chosenProduct].Barcode ||
                                            prop.Name.ToLower() == "packsize" && PacksizeCpy != -1 && PacksizeCpy != products[chosenProduct].Packsize ||
                                            prop.Name.ToLower() == "minorder" && MinOrderCpy != -1 && MinOrderCpy != products[chosenProduct].MinOrder)
                                            {
                                                <li style="color: green; font-weight: 700;" id="itemLiTitles">@prop.Name âœ“</li>
                                            }
                                            else
                                            {
                                                <li id="itemLiTitles">@prop.Name</li>
                                            }
                                        }
                                    }
                                }
                            }
                        </ul>
                    </div>
                    <div id="currentInfoValues">
                        <ul style="list-style: none;" id="matchListLeft">
                            @{
                                if (products.Count() > 0)
                                {
                                    if (matchTitle != "")
                                    {
                                        foreach (PropertyInfo prop in products[chosenProduct].GetType().GetProperties())
                                        {
                                            if (prop.Name == "ArriveDate" && ArriveDateCpy != null)
                                            {
                                                <li id="itemLi">@ArriveDateCpy.ToString().Substring(0,10)</li>
                                            }
                                            else if (prop.Name == "RemovedFromStockDate" && RemovedFromStockDateCpy != null)
                                            {
                                                <li id="itemLi">@RemovedFromStockDateCpy.ToString().Substring(0,10)</li>
                                            }
                                            else if (prop.Name.ToLower() == "inhousetitle" && InHouseTitleCpy != null)
                                            {
                                                <li id="itemLi">@InHouseTitleCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "productid" && ProductIdCpy != null)
                                            {
                                                <li id="itemLi">@ProductIdCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "orderprice" && OrderPriceCpy != null)
                                            {
                                                <li id="itemLi">@OrderPriceCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "stockamount" && StockAmountCpy != null)
                                            {
                                                <li id="itemLi">@StockAmountCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "orderamount" && OrderAmountCpy != null)
                                            {
                                                <li id="itemLi">@OrderAmountCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "availableamount" && AvailableAmountCpy != null)
                                            {
                                                <li id="itemLi">@AvailableAmountCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "ordered" && OrderedCpy != null)
                                            {
                                                <li id="itemLi">@OrderedCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "orderquantity" && OrderQuantityCpy != null)
                                            {
                                                <li id="itemLi">@OrderQuantityCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "titlegws" && TitleGWSCpy != null)
                                            {
                                                <li id="itemLi">@TitleGWSCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "barcode" && BarcodeCpy != null)
                                            {
                                                <li id="itemLi">@BarcodeCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "packsize" && PacksizeCpy != null)
                                            {
                                                <li id="itemLi">@PacksizeCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "minorder" && MinOrderCpy != null)
                                            {
                                                <li id="itemLi">@MinOrderCpy.ToString()</li>
                                            }
                                            else if (prop.Name.ToLower() == "target" && TargetCpy != null)
                                            {
                                                <li id="itemLi">@TargetCpy.ToString()</li>
                                            }
                                            else
                                            {
                                                <li id="itemLi"></li>
                                            }
                                        }
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>
                <div id="ignoreApplyButtons">
                    <button onclick=@(()=>ApplyReset(true)) class="btn btn-warning">Reset</button>
                </div>
            </div>

            @*----------------------------------------------------------------------------------------------------------------------*@

            <div id="rightItem">
                @code {
                    int justBooted = 0;

                    private void updateJustBooted()
                    {
                        justBooted = 1;
                    }
                }
                <div id="itemTitle">
                    <h3 style="text-align: center;">Match suggestion:</h3>
                </div>
                <div id="itemTitle">
                    <div id="rightAuxItems">
                        <div>
                            <select name="matches" id="matches" @onchange="checkIfMatchChosen">
                                @{
                                    int i = 0;

                                    foreach (Product item in matchSuggestions)
                                    {
                                        i++;
                                        <option value="@item.TitleGWS">@item.TitleGWS</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div id="leftMatchItemsFlex" class="w-100">
                    <div id="currentInfo" class="w-100">
                        <ul id="matchListLeft" class="w-100">
                            @{
                                foreach (PropertyInfo prop in matchSuggestions[chosenMatch].GetType().GetProperties())
                                {
                                    <div class="w-100">
                                    <li style="display: flex; justify-content: space-between;">
                                        <div>
                                            <label class="form-check-label" for="@prop.Name">
                                                    @prop.Name
                                            </label>
                                        </div>
                                        <div>
                                                @if (prop.GetValue(matchSuggestions[chosenMatch], null) != null)
                                                {
                                                    @if (prop.Name == "ArriveDate" || prop.Name == "RemovedFromStock" || prop.Name == "UserActions")
                                                    {
                                                        @prop.GetValue(matchSuggestions[chosenMatch], null).ToString().Substring(0,10)
                                                    }
                                                    else
                                                    {
                                                        @prop.GetValue(matchSuggestions[chosenMatch], null).ToString()
                                                    }
                                                }
                                        </div>
                                    </li>
                            </div>
                                }
                            }
                    </ul>
                </div>
            </div>
            <div id="ignoreApplyButtons">
                <button onclick=@(()=>ApplyReset(false)) class="btn btn-success">Apply</button>
            </div>
        </div>
    </div>
    }
</div>

@*----------------------------------------------------------------------------------------------------------------------*@

<div id="accIgnContainer">
    <div id="acceptIgnore">
        <button id="ignoreButton" onclick=@(()=>AcceptMatch(products[chosenProduct], true)) class="btn btn-warning btn" disabled="@reverseIgnore">Ignore</button>
        <button id="acceptButton" onclick=@(()=>AcceptMatch(products[chosenProduct], false)) class="btn btn-success btn" disabled="@reverseAccepted">Accept</button>
    </div>
</div>

<div id="continueBtnContainer">
    <button class="btn btn-primary btn-lg" disabled="@disableContinue" @onclick="continueSequence">CONTINUE</button>
</div>

@*----------------------------------------------------------------------------------------------------------------------*@

@code {
    //Variables that are used as the buffer between applied match and accepted match
    bool sameTitle = false;
    int? StockAmountCpy = -1;
    int? OrderAmountCpy = -1;
    int? AvailableAmountCpy = -1;
    int? OrderedCpy = -1;
    int? OrderQuantityCpy = -1;
    int? PacksizeCpy = -1;
    int? MinOrderCpy = -1;
    int? TargetCpy = -1;
    double? OrderPriceCpy = -1;
    string TitleGWSCpy = "";
    string InHouseTitleCpy = "";
    string ProductIdCpy = "";
    string BarcodeCpy = "";
    DateTime? ArriveDateCpy;
    DateTime? RemovedFromStockDateCpy;

    int counter = 0;
    string matchTitle = "";
    bool suggestionsOff = true;
    bool matchprodCheckStatus = false;
    bool accepted = false;
    bool reverseIgnore = false;
    bool reverseAccepted = true;
    bool ignore = false;
    bool disableContinue = true;

    //Method that sets the focused product when unknown product is chosen
    private async void GetValue(string item)
    {
        accepted = false;

        matchTitle = item;

        ApplyReset(true);
        UpdateMatch(matchTitle);

        reverseIgnore = IsMapped(products[chosenProduct].Barcode);

        await Task.Delay(1);
        StateHasChanged();
        await Task.Delay(1);
        StateHasChanged();
    }

    private async Task continueSequence()
    {
        foreach (Product product in products)
        {
            await _db.CreateOrUpdateProduct(product);
            await _db.CreateOrUpdateMapping(productToMapping(product));
        }
        navManager.NavigateTo("/order/overview", true);
    }

    private Mapping productToMapping(Product product)
    {
        Mapping mapping = new Mapping();
        foreach (PropertyInfo prop in product.GetType().GetProperties())
        {
            if (prop.Name == "ProductId")
            {
                mapping.ProductIdMapping = prop.GetValue(product, null).ToString();
            }
            else if (prop.Name == "Barcode")
            {
                mapping.Barcode = prop.GetValue(product, null).ToString();
            }
            else if (prop.Name == "TitleGWS")
            {
                mapping.TitleGWS = prop.GetValue(product, null).ToString();
            }
            else if (prop.Name == "MinOrder")
            {
                mapping.MinOrder = Convert.ToInt32(prop.GetValue(product, null));
            }
            else if (prop.Name == "Packsize")
            {
                mapping.PackSize = Convert.ToInt32(prop.GetValue(product, null));
            }
            else if (prop.Name == "Target")
            {
                mapping.Target = Convert.ToInt32(prop.GetValue(product, null));
            }
        }
        return mapping;
    }
    //Method to Apply a match if "Apply"-button pressed or
    //reset values in left box when "reset"-button is pressed, if "Apply" has already been pressed
    private void ApplyReset(bool reset)
    {
        int index = 0;

        if (reset == true)
        {
            resetOrApply = products;
            index = chosenProduct;
            accepted = false;
            reverseAccepted = true;
        }
        else
        {
            resetOrApply = matchSuggestions;
            index = chosenMatch;
            accepted = true;
            reverseAccepted = false;
        }

        foreach (PropertyInfo prop in resetOrApply[index].GetType().GetProperties())
        {
            if (prop.Name.ToLower() == "titlegws" && prop.GetValue(resetOrApply[index], null) != null)
            {
                TitleGWSCpy = prop.GetValue(resetOrApply[index], null).ToString();
            }
            else if (prop.Name.ToLower() == "inhousetitle" && prop.GetValue(resetOrApply[index], null) != null)
            {
                InHouseTitleCpy = prop.GetValue(resetOrApply[index], null).ToString();
            }
            else if (prop.Name.ToLower() == "productid" && prop.GetValue(resetOrApply[index], null) != null)
            {
                ProductIdCpy = prop.GetValue(resetOrApply[index], null).ToString();
            }
            // else if (prop.Name.ToLower() == "barcode" && prop.GetValue(resetOrApply[index], null) != null)
            // {
            //     BarcodeCpy = prop.GetValue(resetOrApply[index], null).ToString();
            // }
            else if (prop.Name.ToLower() == "target")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    TargetCpy = temp;
                }
                else
                {
                    TargetCpy = products[chosenProduct].Target;
                }
            }
            else if (prop.Name.ToLower() == "orderprice")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    OrderPriceCpy = temp;
                }
                else
                {
                    OrderPriceCpy = products[chosenProduct].OrderPrice;
                }
            }
            else if (prop.Name.ToLower() == "stockamount")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    StockAmountCpy = temp;
                }
                else
                {
                    StockAmountCpy = products[chosenProduct].StockAmount;
                }
            }
            else if (prop.Name.ToLower() == "availableamount")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    AvailableAmountCpy = temp;
                }
                else
                {
                    AvailableAmountCpy = products[chosenProduct].AvailableAmount;
                }
            }
            else if (prop.Name.ToLower() == "ordered")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    OrderedCpy = temp;
                }
                else
                {
                    OrderedCpy = products[chosenProduct].Ordered;
                }
            }
            else if (prop.Name.ToLower() == "orderquantity")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    OrderQuantityCpy = temp;
                }
                else
                {
                    OrderQuantityCpy = products[chosenProduct].OrderQuantity;
                }
            }
            else if (prop.Name.ToLower() == "packsize")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    PacksizeCpy = temp;
                }
                else
                {
                    PacksizeCpy = products[chosenProduct].Packsize;
                }
            }
            else if (prop.Name.ToLower() == "minorder")
            {
                if (prop.GetValue(resetOrApply[index], null) != null)
                {
                    int? temp = StringToInt(prop.GetValue(resetOrApply[index], null).ToString());
                    MinOrderCpy = temp;
                }
                else
                {
                    MinOrderCpy = products[chosenProduct].MinOrder;
                }
            }
        }
    }

    int chosenProduct = 0;
    int chosenMatch = 0;

    //This updates the index that is used when deciding which product has been chosen
    private void UpdateMatch(string currentProduct)
    {
        for (int i = 0; i < products.Count(); i++)
        {
            foreach (PropertyInfo prop in products[i].GetType().GetProperties())
            {
                if (prop.GetValue(products[i], null) != null)
                {
                    if (products[i].Barcode == matchTitle)
                    {
                        chosenProduct = i;

                        //Copy of all product variables - buffer before accepting match changes
                        StockAmountCpy = products[chosenProduct].StockAmount;
                        OrderPriceCpy = products[chosenProduct].OrderPrice;
                        OrderAmountCpy = products[chosenProduct].OrderAmount;
                        AvailableAmountCpy = products[chosenProduct].AvailableAmount;
                        OrderedCpy = products[chosenProduct].Ordered;
                        OrderQuantityCpy = products[chosenProduct].OrderQuantity;
                        PacksizeCpy = products[chosenProduct].Packsize;
                        MinOrderCpy = products[chosenProduct].MinOrder;
                        TargetCpy = products[chosenProduct].Target;
                        TitleGWSCpy = products[chosenProduct].TitleGWS;
                        InHouseTitleCpy = products[chosenProduct].InHouseTitle;
                        ProductIdCpy = products[chosenProduct].ProductId;
                        BarcodeCpy = products[chosenProduct].Barcode;
                        ArriveDateCpy = products[chosenProduct].ArriveDate;
                        RemovedFromStockDateCpy = products[chosenProduct].RemovedFromStockDate;
                    }
                }
            }
        }
        matchprodCheckStatus = false;
    }

    string dropDownList = "";

    //This creates the index for when a match has been chosen (used with matchSuggestions[])
    private void checkIfMatchChosen(ChangeEventArgs e)
    {
        bool valid = false;

        dropDownList = e.Value.ToString();

        if (dropDownList != "" && dropDownList != null && dropDownList.ToLower() != "new product")
        {
            valid = true;
        }

        if (valid == true)
        {
            for (int t = 0; t < matchSuggestions.Count(); t++)
            {
                if (dropDownList == matchSuggestions[t].TitleGWS)
                {
                    chosenMatch = t;
                    break;
                }
            }
        }

        valid = false;
        updateJustBooted();
    }

    //"Accept"-button confirms the choice to map an unknown product to a found match
    private void AcceptMatch(Product product, bool ignore)
    {
        bool resetRun = false;

        if (ignore == true)
        {
            ApplyReset(true);
            resetRun = true;
        }
        if (ignore != true)
        {
            if (TitleGWSCpy != null && TitleGWSCpy != products[chosenProduct].TitleGWS && TitleGWSCpy != "")
            {
                products[chosenProduct].TitleGWS = TitleGWSCpy;
            }
            if (InHouseTitleCpy != null && InHouseTitleCpy != products[chosenProduct].InHouseTitle && InHouseTitleCpy != "")
            {
                products[chosenProduct].InHouseTitle = InHouseTitleCpy;
            }
            if (TargetCpy != null && TargetCpy != products[chosenProduct].Target && TargetCpy != -1)
            {
                products[chosenProduct].Target = TargetCpy;
            }
            if (OrderAmountCpy != null && OrderAmountCpy != products[chosenProduct].OrderAmount && OrderAmountCpy != -1)
            {
                products[chosenProduct].OrderAmount = OrderAmountCpy;
            }
            if (AvailableAmountCpy != null && AvailableAmountCpy != products[chosenProduct].AvailableAmount && AvailableAmountCpy != -1)
            {
                products[chosenProduct].AvailableAmount = AvailableAmountCpy;
            }
            if (OrderPriceCpy != null && OrderPriceCpy != products[chosenProduct].OrderPrice && OrderPriceCpy != -1)
            {
                products[chosenProduct].OrderPrice = OrderPriceCpy;
            }
            if (OrderedCpy != null && OrderedCpy != products[chosenProduct].Ordered && OrderedCpy != -1)
            {
                products[chosenProduct].Ordered = OrderedCpy;
            }
            if (StockAmountCpy != null && StockAmountCpy != products[chosenProduct].StockAmount && StockAmountCpy != -1)
            {
                products[chosenProduct].StockAmount = StockAmountCpy;
            }
            if (PacksizeCpy != null && PacksizeCpy != products[chosenProduct].Packsize && PacksizeCpy != -1)
            {
                products[chosenProduct].Packsize = PacksizeCpy;
            }
            if (MinOrderCpy != null && MinOrderCpy != products[chosenProduct].MinOrder && MinOrderCpy != -1)
            {
                products[chosenProduct].MinOrder = MinOrderCpy;
            }
            if (OrderQuantityCpy != null && OrderQuantityCpy != products[chosenProduct].OrderQuantity && OrderQuantityCpy != -1)
            {
                products[chosenProduct].OrderQuantity = OrderQuantityCpy;
            }
            if (ProductIdCpy != null && ProductIdCpy != products[chosenProduct].ProductId && ProductIdCpy != "")
            {
                products[chosenProduct].ProductId = ProductIdCpy;
            }
        }

        if (accepted == false)
        {
            if (IgnoredTitles.Contains(products[chosenProduct].Barcode)) {
                IgnoredTitles.Remove(products[chosenProduct].Barcode);
            }
            if (MappedTitles.Contains(products[chosenProduct].Barcode)) {
                MappedTitles.Remove(products[chosenProduct].Barcode);
            }
            IgnoredTitles.Add(products[chosenProduct].Barcode);
        }
        else
        {
            if (IgnoredTitles.Contains(products[chosenProduct].Barcode))
            {
                IgnoredTitles.Remove(products[chosenProduct].Barcode);
            }
            if (MappedTitles.Contains(products[chosenProduct].Barcode))
            {
                MappedTitles.Remove(products[chosenProduct].Barcode);
            }
            MappedTitles.Add(products[chosenProduct].Barcode);
        }
        bool disabled = true;

        matchTitle = BarcodeCpy;
        if (chosenProduct + 1 < products.Count())
        {
            matchTitle = products[chosenProduct + 1].Barcode;
        }
        else
        {
            matchTitle = products[0].Barcode;
        }

        GetValue(matchTitle);
        suggestedMapping();
    }

    /*List of strings, is used to check if product is mapped*/
    private List<string> MappedTitles = new List<string>();

    /*Check if title is in MappedTitles list*/
    private bool IsMapped(string barcode)
    {
        if (MappedTitles.Count() > 0)
        {
            foreach (string prodBarcode in MappedTitles)
            {
                if (barcode == prodBarcode)
                {
                    return true;
                }
            }
            return false;
        }
        else
        {
            return false;
        }
    }

    private List<string> IgnoredTitles = new List<string>();
    private bool IsIgnored(string barcode)
    {
        if (IgnoredTitles.Count() > 0)
        {
            foreach (string prodBarcode in IgnoredTitles)
            {
                if (barcode == prodBarcode)
                {
                    return true;
                }
            }
            return false;
        }
        else
        {
            return false;
        }
    }

    /*Get products from database and insert products into database*/
    private List<Product> products = new();
    private List<Product> matchSuggestions = new();
    private List<Product> resetOrApply = new();

    private async void suggestedMapping()
    {
        matchSuggestions.Clear();
        matchSuggestions = await _db.GetMatchSuggestions(products[chosenProduct]);
    }

    protected override async Task OnInitializedAsync()
    {
        //await _db.LoadProducts();
        if (products.Count() == 0 || products == null)
        {
            products = await _db.GetUnknownProducts("Pricelist Europe__3.xlsx");
        }
        matchSuggestions = await _db.GetMatchSuggestions(products[chosenProduct]);
    }

    //Parsing methods
    private DateTime? stringToDateTime(string dateTime)
    {
        DateTime dt = DateTime.ParseExact(dateTime, "dd-MM-yyyy", null);

        return dt;
    }

    private int? StringToInt(string str)
    {
        int? parsedInt = 0;
        Int32.TryParse(str, out int x);    // or, use `int.TryParse()`

        if (x > 0)
        {
            parsedInt = int.Parse(str);
            return parsedInt;
        }
        else
        {
            return parsedInt;
        }
    }
}