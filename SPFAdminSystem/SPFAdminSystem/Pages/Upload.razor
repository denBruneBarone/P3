@page "/upload"
@using System.IO
@inject IWebHostEnvironment env
@inject NavigationManager NavManager
@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.ProductFiles
@inject IProductService _productDb

<PageTitle>Upload</PageTitle>

<center>
    <div class="upload-container">
        <div class="upload-div">
            <div class="upload-button">
                <label for="fileinput" class="label-wrapper">
                    <span class="oi oi-paperclip"></span>
                    Upload price list file
                    <InputFile OnChange="HandleSelectedFile" multiple id="fileinput" style="width:0; height:0; overflow: hidden;" />
                </label>
            </div>  
        </div>
            <small>@Message</small>
            <p>@addedString</p>

        
        <div class="nav-buttons">
            <button @onclick="ContinueClicked" type="button" class="btn btn-primary">Continue</button>
        </div>
    </div>
</center>

<FileCard Title="Produkter" State=@produkterState Text=@produkterText ButtonText="Upload Produkter.xlsx to DB" _callback=insertProdukterInDb        ></FileCard>
<FileCard Title="Mapping"   State=@mappingState   Text=@mappingText   ButtonText="Upload Mapping.xlsx to DB"   _callback=insertMappingInDb          ></FileCard>
<FileCard Title="Pricelist" State=@pricelistState Text=@pricelistText ButtonText="Upload Pricelist"            _callback="doSomethingWithPricelist" ></FileCard>

@* Det her skal laves finere. Ved bare ikke hvor knappen skal være henne :)*@
<button onclick="@mapMappingsToDb" class="btn btn-primary">Merge Mappings into Products' DB'</button><br />
<div class="container-fluid">
    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" style="width:auto" hidden=@isProgressHidden />
</div>
<p>@mergedString</p>
@code {
    string Message = "No files are selected";
    string? addedString;
    string produkterState = "not ready";
    string mappingState = "not ready";
    string pricelistState = "not ready";
    string? produkterText;
    string? mappingText;
    string? pricelistText;
    private bool isProgressHidden = true;
    private string mergedString = "";

    IReadOnlyList<IBrowserFile> selectedFiles;
    //"selectedFiles gets 
    private void HandleSelectedFile(InputFileChangeEventArgs e){
        addedString = "";
        selectedFiles = e.GetMultipleFiles();
        Message = "files chosen:";
        foreach (var file in selectedFiles) {
            string filename = file.Name.ToString();
            if (filename.Contains("Pricelist") || filename.Contains("Mapping") || filename.Contains("Produkter")) addedString += "'" + file.Name.Remove(file.Name.Length-5).Replace("_","") + "' ";

        }
        this.StateHasChanged();
    }
    private async void ContinueClicked() {
        /*As there is only one file, a list may be redundant*/
        /*Der skal implementeres errorhandling :) */
        try
        {
            foreach (var file in selectedFiles)
            {
                /*The input parameter in OpenReadStream is the max file size in bytes (normally at 500kb/512.000 bytes*/
                Stream stream = file.OpenReadStream(1000000);
                /*"var path" Is the path where the files are uploaded to. When we have gotten the DB down, we should send the right things to the database here instead*/
                var path = $"{env.WebRootPath}\\{file.Name}";
                FileStream fs = File.Create(path);
                /*The file content is copied to the path*/
                await stream.CopyToAsync(fs);
                /*The two streams are closed again*/
                stream.Close();
                fs.Close();
                string filename = file.Name.ToString();

                if (filename.Contains("Pricelist")) { 
                    pricelistState = "ready";
                    pricelistText = filename + " was last modified on " + file.LastModified.DateTime;
                } 
                if (filename.Contains("Mapping"))
                {
                    mappingState = "ready";
                    mappingText = filename + " was last modified on " + file.LastModified.DateTime;
                }
                if (filename.Contains("Produkter"))
                {
                    produkterState = "ready";
                    produkterText = filename + " was last modified on " + file.LastModified.DateTime;
                }
            }
            this.StateHasChanged();
        }catch(NullReferenceException e){
            Message = "You have to add a price list file before continuing!";
        }
    }

    private async void insertProdukterInDb()
    {
        await _productDb.InsertExcelProducts("Produkter.xlsx");
    }
    private async void insertMappingInDb()
    {
        await _productDb.InsertExcelMapping("Mapping.xlsx");
    }
    private async void mapMappingsToDb()
    {
        isProgressHidden = false;
        await Task.Delay(1);
        await _productDb.JoinMappingToProducts();
        isProgressHidden = true;
        mergedString = "Mappings merged into products!";
        StateHasChanged();
    }
    // Alijas og Ozzy's funktioner her. Alle Filecards skal have en _callback. Derfor nødvendig.
    private void doSomethingWithPricelist()
    {
    }
}
