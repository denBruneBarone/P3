@using SPFAdminSystem.Database;
@using SPFAdminSystem.Database.ProductFiles
@inject IProductService _productDb

<div id="outerDiv" class="mb-2">
    <span class="oi oi-file"></span>
    <h3>@Title</h3>
    <p>@Text</p>
    <p class="lead">@loadString</p>
    @* ProgressBar frrom Radzen. Radzen is a package which adds several components. Progressbar has to be withing this div to inherit width - otherwise it disapears. 
    To make progressBar determinable simply change Mode to ProgressBarMode.Determinate. Now Value should be updated based on loading progress.*@
    <div class="container-fluid">
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" style="width:auto" hidden=@isProgressHidden/>
    </div>
    <span style="color:green" class="oi oi-check" hidden=@isCheckHidden></span>
    @if (State == "ready")
    {
        <div id="buttonDiv">
            <button class="btn btn-primary" onclick="@ChangeState">@ButtonText</button>
        </div>
    }
    else
    {
        <p>@Title not added yet.</p>
    }
</div>


@code {
    [Parameter] public EventCallback _callback { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public string State { get; set; }
    [Parameter] public string? ButtonText { get; set; }
    public string loadString = string.Empty;
    private bool isProgressHidden = true;
    double value = 5;
    private bool isCheckHidden = true;

    public async void ChangeState()
    {
        loadString = "Progress: Loading";
        isProgressHidden = false;
        await Task.Delay(1);
        await _callback.InvokeAsync();
        loadString = "Progress: Done!";
        isProgressHidden = true;
        isCheckHidden = false;
        StateHasChanged();
    }
}
