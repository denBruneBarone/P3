@using SPFAdminSystem.Database.UserFiles
@using System.ComponentModel.DataAnnotations;
@using BCrypt.Net
@inject IUserService _userdb
<div class="@showModal" style="height: 100%; width: 100%; position: fixed; top: 0; left: 0; z-index: 5; display: flex; justify-content: center; align-items: center;">
    <div @onclick=close class="bg-black bg-opacity-50" style="position: fixed; left: 0; top: 0; width: 100%; height: 100%; z-index: 1;"></div>
    <div class="modal-dialog" role="document" style="z-index: 2; width: 100%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Change Password</h5>
            </div>
            <EditForm Model="@model" OnValidSubmit="@ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3 pt-4 px-4">
                    <label>New Password: </label>
                    <input @bind="model.newPassword" class="form-control" type="password" required />
                </div>
                <div class="mb-3 pb-4 px-4">
                    <label>Confirm Password: </label>
                    <input @bind-value="model.confirmPassword" type="password" class="form-control" placeholder="Confirm Password" required />
                </div>
                <div class="mb-3 d-grid gap-2 flex justify-content-center">
                    <input type="submit" name="Submit" value="Change Password" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public User user { get; set; }
    [Parameter] public Action? closeModal { get; set; }
    [Parameter] public string? showModal { get; set; } = "visually-hidden";
    private class Model
    {

        public string newPassword { get; set; }
        [Compare(nameof(newPassword), ErrorMessage = "Passwords do not match!")]
        public string confirmPassword { get; set; }
    }
    private Model model = new();

    public async Task ChangePassword()
    {
        user.Password = BCrypt.HashPassword(model.newPassword);
        await _userdb.UpdateUser(user);
        close();
    }

    public void close()
    {
        closeModal.Invoke();
    }

}