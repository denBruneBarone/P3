@using SPFAdminSystem.Database.UserFiles
@using System.ComponentModel.DataAnnotations;
@using BCrypt.Net
@using System
@inject NavigationManager navManager
@inject IUserService _userdb
<div class="@showModal" style="height: 100%; width: 100%; position: fixed; top: 0; left: 0; z-index: 5; display: flex; justify-content: center; align-items: center;">
    <div @onclick=close class="bg-black bg-opacity-50" style="position: fixed; left: 0; top: 0; width: 100%; height: 100%; z-index: 1;"></div>
    <div class="modal-dialog" role="document" style="z-index: 2; width: 100%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add User</h5>
            </div>
            <EditForm Model="@Pass" OnValidSubmit="@AddUser">
                <div class="modal-body" style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <table class="table table-striped table-hover border-info h-100">
                        <thead>
                            <tr>
                                <th scope="col">Item</th>
                                <th class="text-center" scope="col">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th class="align-middle" scope="row" style="width: 33%;">Username:</th>
                                <td class="text-center">
                                    <input id="usernameinput" type="text" @bind=newUser.UserName required placeholder="johndoe21"/>
                                </td>
                            </tr>
                            <tr>
                                <th class="align-middle" scope="row" style="width: 33%;">Full Name:</th>
                                <td class="text-center">
                                    <input id="fullnameinput"type="text" @bind-value=newUser.FullName required placeholder="John Doe"/>
                                </td>
                            </tr>
                            <tr>
                                <th class="align-middle" scope="row" style="width: 33%">Role:</th>
                                <td>
                                    <div class="text-center">
                                        <select name="role" id="role" @bind=role required>
                                            <option value="Employee">Employee</option>
                                            <option value="Admin">Administrator</option>
                                        </select>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="w-100" style="display:flex; justify-content: space-around">
                        <input id="passwordinput" @bind="Pass.pw" class="form-control" type="password" placeholder="Password" required />
                        <input id="cpasswordinput" @bind="Pass.confirmPassword" type="password" class="form-control" placeholder="Confirm Password" required />
                    </div>

                </div>
                <div class="modal-footer flex-row justify-content-around">
                    <input id="adduserinput" type="submit" name="Submit" value="Add" class="btn btn-primary" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick=close>Abort</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? showModal { get; set; }
    [Parameter] public Action closeModal { get; set; }
    private string role = "Employee";
    private User newUser = new();
    private PwClass Pass = new();
    private class PwClass
    {

        public string pw { get; set; }
        [Compare(nameof(pw), ErrorMessage = "Passwords do not match!")]
        public string confirmPassword { get; set; }
    }
    public async Task AddUser()
    {
        newUser.Password = BCrypt.HashPassword(Pass.pw);
        newUser.Role = role;
        await _userdb.InsertUser(newUser);
        close();
    }

    public void close()
    {
        closeModal.Invoke();
    }
}