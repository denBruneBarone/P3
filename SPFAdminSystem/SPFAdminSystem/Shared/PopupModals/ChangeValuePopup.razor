@using SPFAdminSystem.Database.UserFiles
@using System.ComponentModel.DataAnnotations;
@using BCrypt.Net
@inject IUserService _userdb

<div class="@showModal" style="height: 100%; width: 100%; position: fixed; top: 0; left: 0; z-index: 5; display: flex; justify-content: center; align-items: center;">
    <div @onclick=close class="bg-black bg-opacity-50" style="position: fixed; left: 0; top: 0; width: 100%; height: 100%; z-index: 1;"></div>
    <div class="modal-dialog" role="document" style="z-index: 2; width: 100%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Change @val.Title</h5>
            </div>
            <EditForm Model="@model" OnValidSubmit="@ChangeValue">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3 pt-4 px-4">
                    @if (val.Title == "UserName")
                    {
                        <p>CURRENT VALUE: @user.UserName</p>
                    }
                    else if (val.Title == "Fullname")
                    {
                        <p>CURRENT VALUE: @user.FullName</p>
                    }
                    else
                    {
                        <p>CURRENT VALUE: @user.Role</p>
                    }
                </div>
                <div class="mb-3 pb-4 px-4">
                    <label>Set Value: </label>
                    <input @bind-value="model.newVal" class="form-control" placeholder="New Username" required />
                </div>
                <div class="mb-3 d-grid gap-2 flex justify-content-center">
                    <input type="submit" name="Submit" value="Change Password" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public string showModal { get; set; }
    [Parameter] public Action closeModal { get; set; }
    [Parameter] public User user { get; set; }
    [Parameter] public string valueType { get; set; }




    public class Value
    {
        public string Title { get; set; }
        public string id { get; set; }
    }

    public Value val = new();


    protected override async Task OnInitializedAsync()
    {
        switch (valueType)
        {
            case "UserName":
                {
                    val.Title = "UserName";
                    val.id = "UserName";
                    break;
                }
            case "Fullname":
                {
                    val.Title = "Fullname";
                    val.id = "Fullname";
                    break;
                }
            case "Role":
                {
                    val.Title = "Role";
                    val.id = "Role";
                    break;
                }
        }
        StateHasChanged();
    }

    public class Model
    {
        public string? newVal { get; set; }
    }
    public Model model = new();

    public void close()
    {

    }

    public async void ChangeValue()
    {

    }
}